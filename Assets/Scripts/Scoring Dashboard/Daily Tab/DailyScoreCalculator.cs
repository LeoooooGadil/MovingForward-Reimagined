using System;
using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

public static class DailyScoreCalculator
{
	public static DailyScoreSave dailyScoreSave;
	public static string saveFileName = "dailyScoreSaveData";

	static void LoadDailyScore()
	{
		DailyScoreSaveData dailyScoreSaveData = SaveSystem.Load(saveFileName) as DailyScoreSaveData;

		if (dailyScoreSaveData == null)
		{
			dailyScoreSave = new DailyScoreSave();
			return;
		}

		dailyScoreSave = new DailyScoreSave(dailyScoreSaveData);
	}

	public static void PublishDailyTask(string key, DailyTaskAggregate dailyTaskAggregate)
	{
		LoadDailyScore();

		DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(dailyTaskAggregate.timestamp);
		DateTime dateTime = dateTimeOffset.LocalDateTime;

		if (dateTime.Day == DateTime.Now.Day)
		{
			dailyScoreSave.Add(dailyScoreSave.GetToday().Add(dailyTaskAggregate.points, key));
			DailyScoreStorage.Publish(key, dailyTaskAggregate.taskName, dailyTaskAggregate.points, dailyTaskAggregate.timestamp, DailyScoreStorageType.AutoGeneratedDailyTask);

			SaveDailyScore();
		}
	}

	public static void PublishDailyTaskV2(string key, DailyTaskAggregateV2 dailyTaskAggregateV2)
	{
		LoadDailyScore();

		DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(dailyTaskAggregateV2.timestamp);
		DateTime dateTime = dateTimeOffset.LocalDateTime;

		if (dateTime.Day == DateTime.Now.Day)
		{
			dailyScoreSave.Add(dailyScoreSave.GetToday().Add(dailyTaskAggregateV2.points, key));
			DailyScoreStorage.Publish(key, dailyTaskAggregateV2.taskName, dailyTaskAggregateV2.points, dailyTaskAggregateV2.timestamp, DailyScoreStorageType.AutoGeneratedDailyTask);

			SaveDailyScore();
		}
	}

	public static void PublishDailyChore(string key, ChoresAggregate dailyChoreAggregate)
	{
		LoadDailyScore();

		DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(dailyChoreAggregate.timestamp);
		DateTime dateTime = dateTimeOffset.LocalDateTime;

		if (dateTime.Day == DateTime.Now.Day)
		{
			dailyScoreSave.Add(dailyScoreSave.GetToday().Add(dailyChoreAggregate.points, key));
			DailyScoreStorage.Publish(key, dailyChoreAggregate.taskName, dailyChoreAggregate.points, dailyChoreAggregate.timestamp, DailyScoreStorageType.AutoGeneratedDailyChore, GetDescription(dailyChoreAggregate.type));

			SaveDailyScore();
		}
	}

	public static void PublishNumberLocation(string key, NumberLocationAggregate numberLocationAggregate)
	{
		LoadDailyScore();

		DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(numberLocationAggregate.timestamp);
		DateTime dateTime = dateTimeOffset.LocalDateTime;

		if (dateTime.Day == DateTime.Now.Day)
		{
			dailyScoreSave.Add(dailyScoreSave.GetToday().Add(numberLocationAggregate.totalPoints, key));
			DailyScoreStorage.Publish(key, numberLocationAggregate.taskName, numberLocationAggregate.totalPoints, numberLocationAggregate.timestamp, DailyScoreStorageType.Minigame);

			SaveDailyScore();
		}
	}

	public static void PublishWordle(string key, WordleAggregate wordleAggregate)
	{
		LoadDailyScore();

		DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(wordleAggregate.timestamp);
		DateTime dateTime = dateTimeOffset.LocalDateTime;

		if (dateTime.Day == DateTime.Now.Day)
		{
			dailyScoreSave.Add(dailyScoreSave.GetToday().Add(wordleAggregate.totalPoints, key));
			DailyScoreStorage.Publish(key, wordleAggregate.taskName, wordleAggregate.totalPoints, wordleAggregate.timestamp, DailyScoreStorageType.Minigame);

			SaveDailyScore();
		}
	}

	public static void PublishDustMeOff(string key, DustMeOffAggregate dustMeOffAggregate)
	{
		LoadDailyScore();

		DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(dustMeOffAggregate.timestamp);
		DateTime dateTime = dateTimeOffset.LocalDateTime;

		if (dateTime.Day == DateTime.Now.Day)
		{
			dailyScoreSave.Add(dailyScoreSave.GetToday().Add(dustMeOffAggregate.totalScore, key));
			DailyScoreStorage.Publish(key, dustMeOffAggregate.taskName, dustMeOffAggregate.totalScore, dustMeOffAggregate.timestamp, DailyScoreStorageType.Minigame);

			SaveDailyScore();
		}
	}

	public static void PublishTakeMeOut(string key, TakeMeOutAggregate takeMeOutAggregate)
	{
		LoadDailyScore();

		DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(takeMeOutAggregate.timestamp);
		DateTime dateTime = dateTimeOffset.LocalDateTime;

		if (dateTime.Day == DateTime.Now.Day)
		{
			dailyScoreSave.Add(dailyScoreSave.GetToday().Add(takeMeOutAggregate.totalScore, key));
			DailyScoreStorage.Publish(key, takeMeOutAggregate.taskName, takeMeOutAggregate.totalScore, takeMeOutAggregate.timestamp, DailyScoreStorageType.Minigame);

			SaveDailyScore();
		}
	}

	public static void PublishBreathingExerciseV2(string key, BreathingExerciseV2Aggregate breathingExerciseV2Aggregate)
	{
		LoadDailyScore();

		DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(breathingExerciseV2Aggregate.timestamp);
		DateTime dateTime = dateTimeOffset.LocalDateTime;

		if (dateTime.Day == DateTime.Now.Day)
		{
			dailyScoreSave.Add(dailyScoreSave.GetToday().Add(breathingExerciseV2Aggregate.totalSet * 10, key));
			DailyScoreStorage.Publish(key, breathingExerciseV2Aggregate.taskName, breathingExerciseV2Aggregate.totalSet * 10, breathingExerciseV2Aggregate.timestamp, DailyScoreStorageType.Minigame);

			SaveDailyScore();
		}
	}

	public static void PublishJournal(string key, JournalAggregate journalAggregate)
	{
		LoadDailyScore();

		DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(journalAggregate.timestamp);
		DateTime dateTime = dateTimeOffset.LocalDateTime;

		if (dateTime.Day == DateTime.Now.Day)
		{
			dailyScoreSave.Add(dailyScoreSave.GetToday().Add(20, key));
			DailyScoreStorage.Publish(key, journalAggregate.taskName, 20, journalAggregate.timestamp, DailyScoreStorageType.Journal);

			SaveDailyScore();
		}
	}

	public static float GetDailyScore()
	{
		LoadDailyScore();
		return dailyScoreSave.GetToday().GetTotalScore();
	}

	public static void SaveDailyScore()
	{
		DailyScoreSaveData dailyScoreSaveData = new DailyScoreSaveData(dailyScoreSave);
		SaveSystem.Save(saveFileName, dailyScoreSaveData);
	}

	public static string GetDescription(DailyChoreType type)
	{
		switch (type)
		{
            case DailyChoreType.Breathe:
                return "Breathing";
            case DailyChoreType.DustMeOff:
                return "Dust Me Off";
            case DailyChoreType.ThrowMeOut:
                return "Take Out The Trash";
            case DailyChoreType.Wordle:
                return "Wordle";
            case DailyChoreType.NumberPlacement:
                return "Number Location";
			case DailyChoreType.JournalEntry:
				return "Journal";
            default:
                return "Unknown";

		}
	}
}
